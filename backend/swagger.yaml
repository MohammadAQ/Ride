openapi: 3.0.3
info:
  title: Ride API
  version: 1.0.0
  description: REST API for managing ride sharing trips.
servers:
  - url: http://localhost:8080/api/v1
paths:
  /health:
    get:
      summary: Health check
      responses:
        '200':
          description: API is running
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok
  /trips:
    get:
      summary: List trips
      parameters:
        - in: query
          name: fromCity
          schema:
            type: string
          description: Filter trips by origin city
        - in: query
          name: toCity
          schema:
            type: string
          description: Filter trips by destination city
        - in: query
          name: limit
          schema:
            type: integer
            default: 20
          description: Number of trips to return (max 100)
        - in: query
          name: cursor
          schema:
            type: string
          description: Cursor for pagination
      responses:
        '200':
          description: List of trips
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TripListResponse'
    post:
      summary: Create a trip
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTripRequest'
      responses:
        '201':
          description: Trip created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Trip'
        '400':
          description: Validation error
        '401':
          description: Unauthorized
  /trips/mine:
    get:
      summary: List trips created by the authenticated driver
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            default: 20
          description: Number of trips to return (max 100)
        - in: query
          name: cursor
          schema:
            type: string
          description: Cursor for pagination
      responses:
        '200':
          description: List of trips owned by the authenticated driver
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TripListResponse'
        '401':
          description: Unauthorized
  /trips/{id}:
    patch:
      summary: Update a trip
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTripRequest'
      responses:
        '200':
          description: Updated trip
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Trip'
        '400':
          description: Validation error
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not found
    delete:
      summary: Delete a trip
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Trip deleted
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not found
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Trip:
      type: object
      properties:
        id:
          type: string
        driverId:
          type: string
        driverName:
          type: string
        fromCity:
          type: string
        toCity:
          type: string
        date:
          type: string
          format: date
        time:
          type: string
          example: '08:30'
        price:
          type: number
        carModel:
          type: string
        carColor:
          type: string
        phoneNumber:
          type: string
        notes:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    TripListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Trip'
        nextCursor:
          type: string
          nullable: true
    CreateTripRequest:
      type: object
      required:
        - fromCity
        - toCity
        - date
        - time
        - price
        - carModel
        - carColor
        - phoneNumber
      properties:
        fromCity:
          type: string
        toCity:
          type: string
        date:
          type: string
          format: date
        time:
          type: string
          example: '08:30'
        price:
          type: number
          minimum: 0
        carModel:
          type: string
        carColor:
          type: string
        phoneNumber:
          type: string
        notes:
          type: string
    UpdateTripRequest:
      type: object
      properties:
        fromCity:
          type: string
        toCity:
          type: string
        date:
          type: string
          format: date
        time:
          type: string
          example: '08:30'
        price:
          type: number
        carModel:
          type: string
        carColor:
          type: string
        phoneNumber:
          type: string
        notes:
          type: string
